{"version":3,"sources":["../src/index.js"],"names":["context","mocks","data","server","ApolloServer","typeDefs","resolvers","introspection","playground","listen","port","process","env","PORT","then","url","console","log"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,MAAMA,UAAU,EAAEC,sBAAF,EAASC,oBAAT,EAAhB;AAHA;;;AAKA,MAAMC,SAAS,IAAIC,0BAAJ,CAAiB;AAC9BC,4BAD8B;AAE9BC,gCAF8B;AAG9BN,SAH8B;AAI9B;AACA;AACA;AACAO,iBAAe,IAPe;AAQ9BC,cAAY;AARkB,CAAjB,CAAf;;AAWAL,OAAOM,MAAP,CACE,EAAEC,MAAMC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAA5B,EADF,EAEEC,IAFF,CAGE,CAAC,EAAEC,GAAF,EAAD,KAAa;AACXC,UAAQC,GAAR,CAAa,uBAAsBF,GAAI,EAAvC;AACD,CALH","file":"index.js","sourcesContent":["import { ApolloServer } from 'apollo-server';\nimport data from './data';\nimport mocks from './mocks';\nimport resolvers from './graphql/resolvers';\n// import debugExtensions from './extensions/debugExtensions';\nimport typeDefs from './graphql/schema';\n\nconst context = { mocks, data };\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context,\n  // extensions: [\n  //   () => debugExtensions,\n  // ],\n  introspection: true,\n  playground: true,\n});\n\nserver.listen(\n  { port: process.env.PORT || 4000 },\n).then(\n  ({ url }) => {\n    console.log(`ğŸš€  Server ready at ${url}`);\n  },\n);\n"]}